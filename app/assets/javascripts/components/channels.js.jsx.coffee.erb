@ColorChannelUserContent = React.createClass
  render : ->
    img = ''
    if this.props.user.avatar_medium_url
      img = `<span><img src={this.props.user.avatar_medium_url} alt="" title={this.props.user.name} /></span>`

    color = ''
    if this.props.report && this.props.report.hex
      style = { backgroundColor : '#' + this.props.report.hex }
      color = `<span>
        <span>&nbsp; / &nbsp;</span>
        <em><i className="color-block" style={style}></i> #{this.props.report.hex}</em>
      </span>`

    ago = ''
    agoPrefix = ''
    agoTime = moment(this.props.user.registered_date).fromNow(true)
    agoPrefix = 'over' if agoTime.match /day|month|year/i
    ago = `<h3>visualizing <span className="hidden-xs">{this.props.user.login}'s browsing history</span> for {agoPrefix} {agoTime}</h3>`

    `<header className="channel-heading">
      <h1>
        {img}
        <span>{this.props.user.name.toLowerCase()}</span>
        {color}
      </h1>
      {ago}
    </header>`
    

@ColorChannelSiteContent = React.createClass
  render : ->
    color = ''
    if this.props.report && this.props.report.hex
      style = { backgroundColor : '#' + this.props.report.hex }
      color = `<span>
        <span>&nbsp; / &nbsp;</span>
        <em><i className="color-block" style={style}></i> #{this.props.report.hex}</em>
      </span>`

    `<header className="channel-heading">
      <h1>
        <span>{this.props.site.name}'s color</span>
        {color}
      </h1>
    </header>`


@ColorChannelEveryoneContent = React.createClass
  render : ->
    color = ''
    if this.props.report && this.props.report.hex
      style = { backgroundColor : '#' + this.props.report.hex }
      color = `<span>
        <span>&nbsp; / &nbsp;</span>
        <em><i className="color-block" style={style}></i> #{this.props.report.hex}</em>
      </span>`

    link = if this.props.current_user
      `<ColorLink to="/">see yours</ColorLink>`
    else
      `<ColorLink to="/signup">add yours!</ColorLink>`

    `<header className="channel-heading">
      <h1>
        <span>everyone's color</span>
        {color}
      </h1>
      <h3>a visual display of a collective browsing history. {link}</h3>
    </header>`


@ColorChannelDetail = React.createClass
  render : ->
    date = if this.props.date then new Date(this.props.date) else new Date()
    date = moment(date).format('ddd, DD MMM YYYY').toLowerCase()

    report = `<p>&nbsp;</p>`
    if this.props.report
      pages = this.props.report.pages_count + ' web page'
      pages = pages + 's' unless pages == 1
      sites = this.props.report.sites_count + ' web site'
      sites = sites + 's' unless sites == 1

      report = `<p>
        <span>{pages}</span>
        <span>&nbsp; / &nbsp;</span>
        <span>{sites}</span>
      </p>`


    `<section className="channel-details">
      <h3>{date}</h3>
      {report}
    </section>`


@ColorChannelPagination = React.createClass
  getInitialState : ->
    visible : false
    screenshotSvg : null
    twitterSvg : null
    facebookSvg : null
    tipText : null
    dialog : null
    sharePanelOpen : false

  componentDidMount : ->
    window.ColorCampSvgs.add('screenshotSvg', "<%= asset_url 'screenshot.svg' %>", this) unless this.state.screenshotSvg
    window.ColorCampSvgs.add('twitterSvg', "<%= asset_url 'twitter.svg' %>", this) unless this.state.twitterSvg
    window.ColorCampSvgs.add('facebookSvg', "<%= asset_url 'facebook.svg' %>", this) unless this.state.facebookSvg

  render : ->
    # nextLink = if this.props.nextUrl
    #   `<a className="paginate older" href={this.props.nextUrl} onClick={this.nextPage}>Older</a>`
    # else
    #   `<span className="paginate older">Older</span>`

    # prevLink = if this.props.prevUrl
    #   `<a className="paginate newer" href={this.props.prevPage} onClick={this.prevPage}>Newer</a>`
    # else
    #   `<span className="paginate newer">Newer</span>`

    screenshotSvg = if this.state.screenshotSvg then `<span dangerouslySetInnerHTML={{__html : this.state.screenshotSvg }} />` else ''
    twitterSvg = if this.state.twitterSvg then `<span className="social-icon social-twitter" dangerouslySetInnerHTML={{__html : this.state.twitterSvg }} />` else ''
    facebookSvg = if this.state.facebookSvg then `<span className="social-icon social-facebook" dangerouslySetInnerHTML={{__html : this.state.facebookSvg }} />` else ''

    nextLink = ''
    prevLink = ''
    
    shareOrTip = `<p className="share-tip" onTap={this.toggleSharing} onMouseDown={this.toggleSharing}>
      <span className="is-not-open">&hellip;</span>
      <span className="is-open">&hellip;</span>
    </p>`
    shareOrTip = `<p className="share-tip">{this.state.tipText}</p>` if this.state.tipText && window.innerWidth > 768

    niceDate = moment(this.props.date).format('DD MMM YYYY');
    if this.props.viewType == 'user'
      twitterText = 'A visual display of the browsing history of @' + this.props.channelInfo.login + ' on ' + niceDate + '.'
    else if this.props.viewType == 'everyone'
      twitterText = 'A visual browsing history of @myinternetcolor users on ' + niceDate + '.'
    else if this.props.viewType == 'site'
      twitterText = 'A visual display of the browsing history of ' + this.props.channelInfo.name + ' on ' + niceDate + '.'
    else
      twitterText = ''

    sharePanelClassName = ''
    sharePanelClassName = 'on-tap-open' if this.state.sharePanelOpen
    options = `
      <div className={'channel-option-actions ' + sharePanelClassName} ref="sharePanel">
        {shareOrTip}
        <div className="share-open">
          <p>
            <a href="https://twitter.com/myinternetcolor" target="_blank" data-text={twitterText} data-tip="share on twitter" onMouseOver={this.showTip} onMouseOut={this.hideTip} onClick={this.twitterShare}>{twitterSvg}</a>
            <a href="https://facebook.com/myinternetcolor" target="_blank" data-tip="share on facebook" onMouseOver={this.showTip} onMouseOut={this.hideTip} onClick={this.facebookShare}>{facebookSvg}</a>
          </p>
          <p>
            <a href="javascript:;" data-tip="download a screenshot" onMouseOver={this.showTip} onMouseOut={this.hideTip} onClick={this.makeScreenshot}>{screenshotSvg}</a>
          </p>
        </div>
      </div>
    `

    `<aside className="channel-options">
      {options}
    </aside>`


  # --- HELPER METHODS ---

  toggleSharing : (e)->
    e.preventDefault()
    this.setState { sharePanelOpen : !this.state.sharePanelOpen }

  twitterShare : (e)->
    e.preventDefault()
    el = e.currentTarget
    text = if el then el.getAttribute 'data-text' else ''
    this.shareDialog 'https://twitter.com/share?url={url}&text=' + text + '&related=myinternetcolor,gleuch,internetcolor'
    this.setState { sharePanelOpen : false }

  facebookShare : (e)->
    e.preventDefault()
    absoluteUrl = window.location.protocol + '//' + window.location.host
    this.shareDialog 'https://www.facebook.com/dialog/share?app_id=' + ColorInitialProps.facebook_app_id + '&display=iframe&href={url}&redirect_uri=' + absoluteUrl + '/share/facebook/success'
    this.setState { sharePanelOpen : false }

  makeScreenshot : (e)->
    this.props.screenshot(e)
    this.setState { sharePanelOpen : false }

  shareDialog : (dialogUrl)->
    if this.props.canonicalUrl
      url = this.props.canonicalUrl
      url = window.location.protocol + '//' + window.location.host + this.props.canonicalUrl unless url.match(/^http/)
    else
      url = window.location.href
  
    dialogUrl = dialogUrl.replace(/\{url\}/g, url)
    w = window.open dialogUrl, 'mycolorshare', 'width=550,height=400,left=' + ((window.screen.width - 550) / 2) + ',top=' + ((window.screen.height - 400) / 2) + ',menubar=no,location=no,resizable=no,scrollbars=no,status=no'
    w.focus()

  showTip : (e)->
    el = e.currentTarget
    if el
      tip = el.getAttribute('data-tip')
      this.setState { tipText : tip }
    
  hideTip : (e)->
    this.setState { tipText : null }

  prevPage : (e)->
    e.preventDefault()
    this.props.paginateCanvas(this.props.prevUrl)

  nextPage : (e)->
    e.preventDefault()
    this.props.paginateCanvas(this.props.nextUrl)


@ColorCanvas = React.createClass
  shouldComponentUpdate : (p,s)->
    false

  render : ->
    `<section className="colorcamp-canvas-area">
      <canvas className="colorcamp-canvas" />
    </section>`


@ColorSiteChannel = React.createClass
  getInitialState : ->
    current_user : this.props.current_user
    channel:
      channel : this.props.params.id
      viewType : 'site'
      url : location.href

  render : ->
    `<ColorChannel {...this.state} canonicalUrl={'/s/' + this.state.channel.channel} />`


@ColorUserChannel = React.createClass
  getInitialState : ->
    # Set channel name. If blank and user is logged in, set as their page.
    channelName = this.props.params.id
    channelName = this.props.current_user.login if !channelName && this.props.current_user && this.props.current_user.login

    {
      current_user : this.props.current_user
      channel:
        channel : channelName
        viewType : 'user'
        url : location.href
    }

  render : ->
    `<ColorChannel {...this.state} canonicalUrl={'/u/' + this.state.channel.channel} />`


@ColorEveryoneChannel = React.createClass
  getInitialState : ->
    current_user : this.props.current_user
    channel:
      channel : 'all_users'
      viewType : 'everyone'
      url : location.href

  render : ->
    `<ColorChannel {...this.state} canonicalUrl="/everyone" />`


@ColorHomepageChannel = React.createClass
  render : ->
    # The homepage acts as as everyone channel for non-logged in users, and the profile screen for logged-in users
    if this.props.current_user
      `<ColorUserChannel {...this.props} />`
    else
      `<ColorEveryoneChannel {...this.props} />`


@ColorChannel = React.createClass
  getInitialState : ->
    channel :       this.props.channel.channel
    channelInfo :   this.props.channel.channelInfo
    date :          this.props.date
    url :           this.props.channel.url
    report :        this.props.report
    nextUrl :       null
    prevUrl :       null
    viewType :      this.props.channel.viewType
    visible :       true
    current_user :  this.props.current_user

  getDefaultProps : ->
    channel : { }

  componentDidMount : ->
    if this.state.url
      this.getChannelData()

  componentWillUnmount : ->
    #

  componentWillUpdate : (p,s)->
    #

  componentDidUpdate : (p,s)->
    if s.url != this.state.url
      this.getChannelData()
    else if this.state.channelInfo && this.state.visible
      unless this.state.viewType == 'user' && this.state.channelInfo.profile_private
        document.colorCamp.enable()

  render : ->
    if !this.state.channelInfo || !this.state.visible
      document.colorCamp.disable()
      return `<span></span>`

    content = ''
    canvas = `<ColorCanvas />`
    details = `<ColorChannelDetail {...this.state} />`
    options = `<ColorChannelPagination {...this.state} screenshot={this.onScreenshot} canonicalUrl={this.props.canonicalUrl} prevUrl={this.state.prevUrl} nextUrl={this.state.nextUrl} paginateCanvas={this.paginateCanvas} />`

    if this.state.viewType == 'user'
      content = `<ColorChannelUserContent {...this.state} user={this.state.channelInfo} />`
      if this.state.channelInfo.profile_private
        content = `<ColorChannelUserContent user={this.state.channelInfo} />`
        details = ''
        canvas = `<section>
          <div className="well">
            <p className="text-center">This user has made their account private.</p>
          </div>
        </section>`
    else if this.state.viewType == 'site'
      content = `<ColorChannelSiteContent {...this.state} site={this.state.channelInfo} />`
    else if this.state.viewType == 'everyone'
      content = `<ColorChannelEveryoneContent {...this.state} />`

    `<article className="channel">
      {details}
      {content}
      {options}
      {canvas}
    </article>`


  # --- HELPER METHODS ---

  openChannel : (e,data)->
    this.setState { viewType : data.viewType, url : data.url, channel : data.channel, visible : true }

  closeChannel : (e,data)->
    unless data.except && data.except == 'channel'
      this.setState { visible : false }

  paginateCanvas : (url)->
    this.setState { url : url }

  # Get the channel info
  getChannelData : (url)->
    this.setState {
      prevUrl : null
      nextUrl : null
    }

    jsonUrl = url || this.state.url
    jsonUrl = this.props.canonicalUrl if this.props.canonicalUrl
    jsonUrl = window.location.protocol + '//' + window.location.host + this.props.canonicalUrl unless jsonUrl.match(/^http/)
    $.ajax( jsonUrl + '.json', {
      dataType : 'json'
      method : 'GET'
      success : ((d,s,x)->
        if d && !d.errors
          try
            p = JSON.parse x.getResponseHeader('X-Pagination')
          catch
            p = { prev_url : null, next_url : null }

          this.setState {
            channel : d.channel,
            channelInfo : d.channelInfo
            date : d.date
            prevUrl : p.prev_url
            nextUrl : p.next_url
            viewType : d.viewType
            report : d.report
          }

          if d.viewType == 'user' && d.channelInfo.profile_private
            document.colorCamp.disable()

          else
            channelName = if this.state.viewType == 'everyone'
              this.state.channel
            else
              this.state.viewType + '-' + this.state.channel

            document.colorCamp.enable ->
              document.colorCamp.setChannelName channelName
              document.colorCamp.dataLoadColors d.colorData

            # Listen for new colors via websocket if only if today
            today = (new Date()).toJSON().replace(/^(\d{4}\-\d{2}\-\d{2})(.*)$/, '$1')
            if today == d.date
              document.colorCamp.websocketInitialize this.websocketUpdate
            else
              document.colorCamp.websocketUninitialize()

      ).bind(this)
      error : ((x,s,e) ->
        #
      ).bind(this)
    })

  websocketUpdate : (data)->
    if data
      document.colorCamp.dataAddNewColor(data.color) if data.color
      this.setState { report: data.report } if data && data.report

  onScreenshot : (e)->
    e.preventDefault()

    visible = this.state.visible
    fdate = moment(this.state.date).format('ddd-DD-MMM-YYYY').toLowerCase()
    nicedate = moment(this.state.date).format('ddd, DD MMM YYYY').toLowerCase()

    channel = 
      name : ''
      avatar : null
      color : null
      sites : null
      pages : null

    if this.state.report
      channel.pages = this.state.report.pages_count + ' web page'
      channel.pages = channel.pages + 's' unless channel.pages == 1
      channel.sites = this.state.report.sites_count + ' web site'
      channel.sites = channel.sites + 's' unless channel.sites == 1

    switch this.state.viewType
      when 'everyone'
        channel.name = 'Everyone'
        fname = 'everyone-' + fdate + '.png'

      when 'user'
        visible = false if this.state.channelInfo.profile_private

        channel.name = this.state.channelInfo.name
        channel.avatar = this.state.channelInfo.avatar_small_url
        fname = this.state.channelInfo.login + '-' + fdate + '.png'

      # when 'site'
      #   channel.name = 'Site'
      #   fname = 'site-' + fdate + '.png'

      else
        visible = false # dunno what this is, so exports are not allowed

    unless visible
      alert 'This channel is not visible or is protected.'
      return

    # Nice hack to scale and zoom the canvas for a higher quality image
    document.colorCamp.canvasZoom2x(true, ->
      screenshot = new window.ColorCampScreenshot
      screenshot.generate( document.colorCamp.canvasContext(), channel, nicedate ).download(fname, ->
        document.colorCamp.canvasZoom2x(false)
      )
    )